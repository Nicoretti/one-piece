[tool.poetry]
name = "pytest-history"
version = "0.2.0"
description = "Pytest plugin to keep a history of your pytest runs"
authors = ["Nicola Coretti <nico.coretti@gmail.com>"]
readme = "README.md"
license = "MIT"
classifiers = [
    "License :: OSI Approved :: MIT License",
]
keywords = ['pytest', 'sqlite', 'sql', 'history']
repository = "https://github.com/Nicoretti/one-piece/tree/grand-line/python/pytest-history"
packages = [{include = "pytest_history", from = "src"}]

[tool.poetry.dependencies]
python = "^3.8"
pytest = "^7.4.3"

[tool.poetry.plugins.pytest11]
pytest-history = "pytest_history"

[tool.poetry.scripts]
pytest-history = "pytest_history.cli:main"



[tool.poetry.group.dev.dependencies]
ruff = "^0.1.6"
coverage = "^7.3.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "I"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
force-wrap-aliases = true
combine-as-imports = true
order-by-type = true
required-imports = ["from __future__ import annotations"]

